using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Transactions;

namespace FCMBusinessLibrary.Business
{
    public class BUSClient
    {


        /// <summary>
        /// Add client
        /// </summary>
        /// <param name="headerInfo"> </param>
        /// <param name="eventClient"></param>
        /// <param name="linkInitialSet"> </param>
        /// <returns></returns>
        public static ResponseStatus ClientAdd(HeaderInfo headerInfo,
                                                        Client eventClient,
                                                        string linkInitialSet)
        {
            ResponseStatus response = new ResponseStatus();

            //
            // This is a new client.
            //
            if (string.IsNullOrEmpty(eventClient.Name))
            {
                response.ReturnCode = -0010;
                response.ReasonCode =  0001;
                response.Message = "Client Name is mandatory.";
                response.Contents = 0;
                return response;
            }

            // --------------------------------------------------------------
            // Check if user ID is already connected to a client
            // --------------------------------------------------------------
            #region Check if user is already connected to a client
            if ( ! string.IsNullOrEmpty(eventClient.FKUserID) )
            {
                var checkLinkedUser = new Client {FKUserID = eventClient.FKUserID};
                var responseLinked = checkLinkedUser.ReadLinkedUser();

                if (!responseLinked.Successful)
                {
                    return responseLinked;
                }

                if (responseLinked.ReturnCode == 0001 && responseLinked.ReasonCode == 0001)
                {
                    response.ReturnCode = -0010;
                    response.ReasonCode = 0002;
                    response.Message = "User ID is already linked to another client.";
                    response.Contents = 0;

                    return response;
                }

            }
            #endregion

            var newClientUid = 0;

            using (var connection = new SqlConnection(ConnString.ConnectionString))
            {

                using (var tr = new TransactionScope(TransactionScopeOption.Required))
                {
                    connection.Open();

                    // -------------------------------
                    // Call method to add new client
                    // -------------------------------
                    var newClient = eventClient.Insert(headerInfo);
                    newClientUid = Convert.ToInt32(newClient.Contents);

                    // -------------------------------------------
                    // Call method to add client extra information
                    // -------------------------------------------
                    eventClient.clientExtraInformation.FKClientUID = eventClient.UID;
                    var cei = ClientExtraInformation.Insert(HeaderInfo.Instance,eventClient.clientExtraInformation);
                    if (cei.ReturnCode != 1)
                    {
                        // Rollback transaction
                        //
                        tr.Dispose();
                        return cei;
                    }

                    // --------------------------------------------
                    // Add first document set
                    // --------------------------------------------
                    var cds = new ClientDocumentSet();
                    cds.FKClientUID = newClientUid;

                    // cds.FolderOnly = "CLIENT" + newClientUID.ToString().Trim().PadLeft(4, '0');
                    cds.FolderOnly = "CLIENT" + newClientUid.ToString(CultureInfo.InvariantCulture).Trim().PadLeft(4, '0');

                    // cds.Folder = FCMConstant.SYSFOLDER.CLIENTFOLDER + "\\CLIENT" + newClientUID.ToString().Trim().PadLeft(4, '0');
                    cds.Folder = FCMConstant.SYSFOLDER.CLIENTFOLDER + @"\" + cds.FolderOnly;

                    cds.SourceFolder = FCMConstant.SYSFOLDER.TEMPLATEFOLDER;
                    cds.Add(headerInfo);

                    // --------------------------------------------
                    // Apply initial document set
                    // --------------------------------------------
                    if (linkInitialSet == "Y")
                    {
                        BUSClientDocument.AssociateDocumentsToClient(
                                clientDocumentSet: cds,
                                documentSetUID: eventClient.FKDocumentSetUID,
                                headerInfo: headerInfo);

                        // Fix Destination Folder Location 
                        //
                        BUSClientDocumentGeneration.UpdateLocation(cds.FKClientUID, cds.ClientSetID);
                    }

                    // Commit transaction
                    //
                    tr.Complete();
                }
            }

            ClientList();

            // Return new client id
            response.Contents = newClientUid;
            return response;
        }

        /// <summary>
        /// Update client details
        /// </summary>
        /// <param name="headerInfo"> </param>
        /// <param name="eventClient"> </param>
        public static ResponseStatus ClientUpdate(HeaderInfo headerInfo, Client eventClient)
        {
            var response = new ResponseStatus();

            // --------------------------------------------------------------
            // Check if user ID is already connected to a client
            // --------------------------------------------------------------
            var checkLinkedUser = new Client
                                      {
                                          FKUserID = eventClient.FKUserID, 
                                          UID = eventClient.UID
                                      };

            if ( ! string.IsNullOrEmpty(eventClient.FKUserID))
            {
                var responseLinked = checkLinkedUser.ReadLinkedUser();

                if (responseLinked.ReturnCode == 0001 && responseLinked.ReasonCode == 0001)
                {
                    response.ReturnCode = 0001;
                    response.ReasonCode = 0002;
                    response.Message = "User ID is already linked to another client.";
                    response.Contents = 0;

                    return response;
                }

                if (responseLinked.ReturnCode == 0001 && responseLinked.ReasonCode == 0003)
                {
                    // All good. User ID is connected to Client Supplied.
                }


                if (responseLinked.ReturnCode == 0001 && responseLinked.ReasonCode == 0001)
                {
                    response.ReturnCode = -0010;
                    response.ReasonCode = 0002;
                    response.Message = "User ID is already linked to another client.";
                    response.Contents = 0;

                    return response;
                }
            }


            using (var connection = new SqlConnection(ConnString.ConnectionString))
            {
                //using (TransactionScope tr = new TransactionScope(TransactionScopeOption.Required))
                //{

                //}

                connection.Open();
                SqlTransaction sqltransaction = connection.BeginTransaction();

                var responseClientUpdate = eventClient.Update(headerInfo, connection, sqltransaction );
                if (!responseClientUpdate.Successful)
                {
                    sqltransaction.Rollback();
                    return responseClientUpdate;
                }
                // -------------------------------------------
                // Call method to add client extra information
                // -------------------------------------------

                var ceiResponse = ClientExtraInformation.Read(headerInfo, eventClient.UID);
                if (ceiResponse.ReturnCode != 1)
                    return ceiResponse;

                var ceiRead = (ClientExtraInformation)ceiResponse.Contents;

                eventClient.clientExtraInformation.RecordVersion = ceiRead.RecordVersion;

                var cei = ClientExtraInformation.Update(
                                                headerInfo, 
                                                eventClient.clientExtraInformation,
                                                connection,
                                                sqltransaction);
                if (!cei.Successful)
                    return cei;

                // Update display logo
                UpdateLogoStatus(eventClient);

                sqltransaction.Commit();
            }

            return response;
        }

        /// <summary>
        /// Retrieve client details
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static ResponseStatus ClientRead(int clientUID)
        {
            ResponseStatus response = new ResponseStatus();

            Client client = new Client();
            client.UID = clientUID;
            client.Read();

            client.clientExtraInformation = new ClientExtraInformation();
            client.clientExtraInformation.FKClientUID = client.UID;
            client.clientExtraInformation.Read();

            if (client.UID > 0)
            {
                ReadLogoStatus(client);
            }

            response.Contents = client;
            return response;
        }

        /// <summary>
        /// Client Delete
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static ResponseStatus ClientDelete(Client eventClient)
        {
            ResponseStatus response = new ResponseStatus();

            response = eventClient.Delete();

            return response;
        }

        /// <summary>
        /// List of clients
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static ResponseStatus ClientList()
        {
            ResponseStatus response = new ResponseStatus();

            response.Contents = Client.List();

            return response;
        }

        public static ResponseStatus ReadFieldClient(string field, int clientUID)
        {
            ResponseStatus response = new ResponseStatus();

            var responseReadFieldClient = Client.ReadFieldClient(field, clientUID);

            response.Contents = responseReadFieldClient;

            return response;
        }

        /// <summary>
        /// Update logo display flag
        /// </summary>
        private static void UpdateLogoStatus(Client eventClient)
        {
            // Update Logo Display Status
            //
            ReportMetadata rmd = new ReportMetadata();
            rmd.ClientUID = Utils.ClientID;
            rmd.RecordType = Utils.MetadataRecordType.CLIENT;
            rmd.FieldCode = Utils.FieldCode.COMPANYLOGO;


            if (rmd.Read(clientUID: Utils.ClientID, fieldCode: Utils.FieldCode.COMPANYLOGO))
            {
                rmd.Enabled = eventClient.DisplayLogo;
                rmd.Save();
            }

            return;
        }



        /// <summary>
        /// Read logo display flag
        /// </summary>
        private static void ReadLogoStatus(Client eventClient)
        {
            // Update Logo Display Status
            //
            ReportMetadata rmd = new ReportMetadata();
            rmd.ClientUID = Utils.ClientID;
            rmd.RecordType = Utils.MetadataRecordType.CLIENT;
            rmd.FieldCode = Utils.FieldCode.COMPANYLOGO;

            if (rmd.Read(clientUID: Utils.ClientID, fieldCode: Utils.FieldCode.COMPANYLOGO))
            {
                eventClient.DisplayLogo = rmd.Enabled;
            }
        }


        ///-------------------------------------------------------------
        ///  Deprecated methods. Kept for future reference.
        /// ------------------------------------------------------------

        /// <summary>
        /// Add client
        /// </summary>
        /// <param name="eventClient"></param>
        /// <returns></returns>
        [Obsolete("The method is deprecated. 09 Jan 2012")]
        private static ResponseStatus ClientAddOldStyle(HeaderInfo headerInfo,
                                                        Client eventClient,
                                                        string linkInitialSet)
        {
            ResponseStatus response = new ResponseStatus();

            //
            // This is a new client.
            //
            if (string.IsNullOrEmpty(eventClient.Name))
            {
                response.ReturnCode = -0010;
                response.ReasonCode = 0001;
                response.Message = "Client Name is mandatory.";
                response.Contents = 0;
                return response;
            }

            // --------------------------------------------------------------
            // Check if user ID is already connected to a client
            // --------------------------------------------------------------
            #region Check if user is already connected to a client
            if (!string.IsNullOrEmpty(eventClient.FKUserID))
            {
                Client checkLinkedUser = new Client();
                checkLinkedUser.FKUserID = eventClient.FKUserID;
                var responseLinked = checkLinkedUser.ReadLinkedUser();

                if (!responseLinked.Successful)
                {
                    return responseLinked;
                }

                if (responseLinked.ReturnCode == 0001 && responseLinked.ReasonCode == 0001)
                {
                    response.ReturnCode = -0010;
                    response.ReasonCode = 0002;
                    response.Message = "User ID is already linked to another client.";
                    response.Contents = 0;

                    return response;
                }

            }
            #endregion

            var newClientUID = 0;

            using (var connection = new SqlConnection(ConnString.ConnectionString))
            {

                connection.Open();
                SqlTransaction sqltransaction = connection.BeginTransaction();

                #region DB Transaction

                // -------------------------------
                // Call method to add new client
                // -------------------------------
                var newClient = eventClient.InsertSubTransaction(connection, sqltransaction, headerInfo);
                newClientUID = Convert.ToInt32(newClient.Contents);

                // -------------------------------------------
                // Call method to add client extra information
                // -------------------------------------------
                eventClient.clientExtraInformation.FKClientUID = eventClient.UID;
                var cei = ClientExtraInformation.InsertSubTransaction(
                                HeaderInfo.Instance,
                                eventClient.clientExtraInformation,
                                connection, sqltransaction);
                if (cei.ReturnCode != 1)
                {
                    sqltransaction.Rollback();
                    return cei;
                }

                // --------------------------------------------
                // Add first document set
                // --------------------------------------------
                ClientDocumentSet cds = new ClientDocumentSet();
                cds.FKClientUID = newClientUID;

                cds.FolderOnly = "CLIENT" + newClientUID.ToString().Trim().PadLeft(4, '0');

                // cds.Folder = FCMConstant.SYSFOLDER.CLIENTFOLDER + "\\CLIENT" + newClientUID.ToString().Trim().PadLeft(4, '0');
                cds.Folder = FCMConstant.SYSFOLDER.CLIENTFOLDER + @"\" + cds.FolderOnly;

                cds.SourceFolder = FCMConstant.SYSFOLDER.TEMPLATEFOLDER;
                cds.AddSubTransaction(connection, sqltransaction, headerInfo);


                // Commit after client is saved.
                //
                sqltransaction.Commit();

                // 01-Jan-2012
                // Client Metadata no longer needed
                // - Logo is now stored on the client
                // - Variables are used in general, no more specific variables
                //

                // --------------------------------------------
                // Add first set of metadata...
                // --------------------------------------------
                //ReportMetadataList rml = new ReportMetadataList();
                //rml.ListDefault();
                //foreach (ReportMetadata rm in rml.reportMetadataList)
                //{
                //    ReportMetadata NovoRM = new ReportMetadata();
                //    NovoRM.ClientType = rm.ClientType;
                //    NovoRM.ClientUID = newClientUID; // Assign to a client
                //    NovoRM.CompareWith = rm.CompareWith;
                //    NovoRM.Condition = rm.Condition;
                //    NovoRM.Description = rm.Description;
                //    NovoRM.FieldCode = rm.FieldCode;
                //    NovoRM.FieldName = rm.FieldName;
                //    NovoRM.FileName = rm.FileName;
                //    NovoRM.FilePath = rm.FilePath;
                //    NovoRM.FoundinDB = rm.FoundinDB;
                //    NovoRM.InformationType = rm.InformationType;
                //    NovoRM.TableName = rm.TableName;
                //    NovoRM.RecordType = "CL";
                //    NovoRM.Enabled = 'Y';
                //    NovoRM.UID = 0;

                //    // NovoRM.SaveSubTransaction(connection, sqltransaction, headerInfo);
                //    NovoRM.Save();
                //}



                // --------------------------------------------
                // Update Logo Status
                // --------------------------------------------
                //UpdateLogoStatus(eventClient);

                #endregion DB Transaction

                // --------------------------------------------
                // Apply initial document set
                // --------------------------------------------
                if (linkInitialSet == "Y")
                {
                    BUSClientDocument.AssociateDocumentsToClient(
                            clientDocumentSet: cds,
                            documentSetUID: eventClient.FKDocumentSetUID,
                            headerInfo: headerInfo);

                    // Fix Destination Folder Location 
                    //
                    BUSClientDocumentGeneration.UpdateLocation(cds.FKClientUID, cds.ClientSetID);


                }
            }

            ClientList();

            // Return new client id
            response.Contents = newClientUID;
            return response;
        }


        /// <summary>
        /// Update logo status
        /// </summary>
        /// <param name="eventClient"></param>
        /// <param name="connection"></param>
        /// <param name="sqltransaction"></param>
        /// <param name="headerInfo"></param>
        [Obsolete("The method is deprecated. 09 Jan 2012")]
        private static void UpdateLogoStatusSubTransaction(
            Client eventClient,
            SqlConnection connection,
            SqlTransaction sqltransaction,
            HeaderInfo headerInfo)
        {
            // Update Logo Display Status
            //
            ReportMetadata rmd = new ReportMetadata();
            rmd.ClientUID = Utils.ClientID;
            rmd.RecordType = Utils.MetadataRecordType.CLIENT;
            rmd.FieldCode = Utils.FieldCode.COMPANYLOGO;

            if (rmd.ReadSubTransaction(
                connection: connection,
                sqltransaction: sqltransaction,
                clientUID: Utils.ClientID,
                fieldCode: Utils.FieldCode.COMPANYLOGO,
                headerInfo: headerInfo))
            {
                rmd.Enabled = eventClient.DisplayLogo;
                rmd.Save();
            }

            return;
        }

    
    }



}
