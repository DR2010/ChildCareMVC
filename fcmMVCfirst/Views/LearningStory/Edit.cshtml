@using MackkadoITFramework.ReferenceData
@using fcmMVCfirst.Models
@model fcmMVCfirst.Models.LearningStory

@{
    ViewBag.Title = "Learning Story Update";
}

<h2>Learning Story - Update</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    @Html.ValidationSummary()

    <fieldset>
        <legend>LearningStory</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.UID)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.UID)
            @Html.ValidationMessageFor(model => model.UID)
        </div>

        @Html.HiddenFor(model => model.FKChildUID)
        <div class="editor-label">
            Child Name
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.child.FirstName) @Html.DisplayFor(model => model.child.Surname)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.FKRoomCode)
        </div>
        @Html.DropDownListFor(
            x => x.FKRoomCode,
            new SelectList(Room.ListS(), "UID", "Name", Model.FKRoomCode),
            "-- Select room --"
        )
        <div class="editor-label">
            @Html.LabelFor(model => model.FKEducatorUID)
        </div>
        @Html.DropDownListFor(
            model => model.FKEducatorUID,
            new SelectList(Educator.ListS(), "UID", "FirstName", Model.FKEducatorUID),
            "-- Select educator --"
        )

        <div class="editor-label">
            @Html.LabelFor(model => model.Story)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Story, new { @class = "editor-label", @cols = 80, @rows = 10 })            
            @Html.ValidationMessageFor(model => model.Story)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Date)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Date)
            @Html.ValidationMessageFor(model => model.Date)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AnalysisOfLearning)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.AnalysisOfLearning, new { @class = "editor-label", @cols = 80, @rows = 10 })            
            @Html.ValidationMessageFor(model => model.AnalysisOfLearning)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ExtensionOfLearning)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.ExtensionOfLearning, new { @class = "editor-label", @cols = 80, @rows = 10 })     
            @Html.ValidationMessageFor(model => model.ExtensionOfLearning)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ParentsComments)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.ParentsComments, new { @class = "editor-label", @cols = 80, @rows = 10 })     
            @Html.ValidationMessageFor(model => model.ParentsComments)
        </div>

    @foreach (var learningItem in CodeValue.ListCodeValues("LEAR"))
    {

        <h2>
            @CodeValue.GetCodeValueDescription("LEAR", @learningItem.ID)
        </h2>

        <table>
            @foreach (var item in RelatedCodeValue.ListS("LEARLESI", "LEAR", @learningItem.ID))
            {
                string n = "LESI," + @item.FKCodeValueTo;

                var showChecked = false;
                foreach (var learningOutcome in Model.LearningOutcomes)
                {
                    if (learningOutcome.FKCodeValue == item.FKCodeValueTo) { showChecked = true;}        
                }
                <tr>
                    @if (showChecked) {
                    <td>
                        <input type="checkbox" name=@n value=@item.FKCodeValueTo checked>
                        <a href=@CodeValue.GetCodeValueExtended("LESI", item.FKCodeValueTo)>@CodeValue.GetCodeValueDescription("LESI", item.FKCodeValueTo)</a></td>
                    } else {
                    <td>
                        <input type="checkbox" name=@n value=@item.FKCodeValueTo >
                        <a href=@CodeValue.GetCodeValueExtended("LESI", item.FKCodeValueTo)>@CodeValue.GetCodeValueDescription("LESI", item.FKCodeValueTo)</a></td>
                    }
                </tr>
            }
        </table>
    }
    <h2>Principles </h2>
    <table>
        @foreach (var item in CodeValue.ListCodeValues("PRIN"))
        {
            string n = "PRIN," + @item.ID;

            var showChecked = false;
            foreach (var principle in Model.Principles)
            {
                if (principle.FKCodeValue == item.ID) { showChecked = true; }
            }
            <tr>
                @if (showChecked)
                {
                    <td>
                        <input type="checkbox" name=@n value=@item.ID checked>
                        <a href=@CodeValue.GetCodeValueExtended("PRIN", item.ID)>@CodeValue.GetCodeValueDescription("PRIN", item.ID)
                        </a></td>
                                    }
                else                 {
                    <td>
                        <input type="checkbox" name=@n value=@item.ID>
                        <a href=@CodeValue.GetCodeValueExtended("PRIN", item.ID)>@CodeValue.GetCodeValueDescription("PRIN", item.ID)
                        </a></td>
                                    }
            </tr>
        }
    </table>
    <h2>Practices </h2>
    <table>
        @foreach (var item in CodeValue.ListCodeValues("PRAC"))
        {
            string n = "PRAC," + @item.ID;

            var showChecked = false;
            foreach (var practice in Model.Practices)
            {
                if (practice.FKCodeValue == item.ID) { showChecked = true; }
            }
            
            <tr>
                @if (showChecked)
                {
                    <td>
                        <input type="checkbox" name=@n value=@item.ID checked>
                        <a href=@CodeValue.GetCodeValueExtended("PRAC", item.ID)>@CodeValue.GetCodeValueDescription("PRAC", item.ID)
                        </a></td>
                                }
                else
                {
                    <td>
                        <input type="checkbox" name=@n value=@item.ID>
                        <a href=@CodeValue.GetCodeValueExtended("PRAC", item.ID)>@CodeValue.GetCodeValueDescription("PRAC", item.ID)
                        </a></td>
                                                                }
            </tr>
        }
    </table>

        <br/>
        @Html.LabelFor(model => model.UserIdCreatedBy)
        @Html.TextBoxFor(model => model.UserIdCreatedBy, new { @readonly=true }) 
        <br />
        @Html.LabelFor(model => model.UserIdUpdatedBy)
        @Html.TextBoxFor(model => model.UserIdUpdatedBy, new { @readonly=true }) 
        <br />
        @Html.LabelFor(model => model.CreationDateTime)
        @Html.TextBoxFor(model => model.CreationDateTime, new { @readonly=true }) 
        <br />
        @Html.LabelFor(model => model.UpdateDateTime)
        @Html.TextBoxFor(model => model.UserIdCreatedBy, new { @readonly=true }) 
        <br />
        @Html.LabelFor(model => model.RecordVersion)
        @Html.TextBoxFor(model => model.RecordVersion, new { @readonly=true }) 
        <br />
        @Html.LabelFor(model => model.IsVoid)
        @Html.TextBoxFor(model => model.IsVoid, new { @readonly=true }) 
        <br />


        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Model.FKChildUID }, null)
</div>
